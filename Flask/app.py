from flask import Flask, render_template, request, redirect, url_for, session
import joblib
import pandas as pd
import shap
import matplotlib
from matplotlib.figure import Figure

# Author: Sagun Shrestha
# Project: Diabetes readmission prediction
# Dependent files:
#                   bio.html
#                   diabetes_form.html
#                   general_projects.html
#                   mle.htmls
#                   resume.html
#                   Image generated by SHAP (Is generated after user clicks submit #                   button)
#                   My Resume PDF
# 
# HTML Layout styled with Bootstrap 5 templates from https://getbootstrap.com/docs/5.0/getting-started/introduction/
# Constructed SHAP explanation as reccomended in the SHAP documentation from https://shap.readthedocs.io/en/latest/generated/shap.Explanation.html

# Date: April 22, 2025
#---------------------------------------------------------------------------------------------------------

# I am adding this line because when I tried submitting for form, i got an error. The error was because matplot lib was trying to launch a GUI window and the app was crashing. Here AGG means dont try to sketch a plot in the guit or dont pop a window. All i am trying do is save the plot image in the static folder and access it in the html template
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import os
#I am importing our best model(The XGB model from my the folder structure that my model created in the jupyter notebook)
best_model = joblib.load("xgb_model.pkl")
#verifying the steps
print(best_model.named_steps)



app = Flask(__name__)
# I am assigning a secret key to secure the form. 
app.secret_key = "dtsc991_remove_browser_catch"

# using the code from my jupyter note book once again to extract the column names from the pipeline.
def retrieve_features_pipeline(preprocessor):
    feature_names = []

    # Numerical features extraction
    # at position 0 is our numberical pipeline which is a tuple, and position 2 is our names of numerical features
    numerical_features = preprocessor.transformers_[0][2]
    # adding our numerical features names in the feature list above
    feature_names += numerical_features

    # Categorical features
    # position 1 is our categorical pipeline 
    categorical_pipeline = preprocessor.transformers_[1][1]
    # this gives our categorical feature names from the pipeline
    categorical_features = preprocessor.transformers_[1][2]
    
    # need the cat_pipeline because one hot encoder we used previously, creates new columns with new names
    one_hot_pipeline = categorical_pipeline.named_steps["one_hot_encode"]
    # now we are extracing the new names 
    one_hot_extracted_features = one_hot_pipeline.get_feature_names_out(categorical_features)
    # passing the new names to the feature_name list
    feature_names += list(one_hot_extracted_features)
    return feature_names


@app.route("/", methods=["GET", "POST"])
def index():
  
    return render_template("bio.html")

@app.route('/resume')
def resume():
    return render_template('resume.html')


@app.route('/mle')


@app.route('/mle', methods=["GET", "POST"])
def predict_readmittance():
    if request.method == "POST":
        try:
            #once the user submits the form, the value is read and saved 
            html_form = request.form
            #converting age, num_medication, time_in_hospital to string with helper function
            age = convert_to_int(html_form["age"])
            num_medications = convert_to_int(html_form["num_medications"])
            time_in_hospital = convert_to_int(html_form["time_in_hospital"])

            data = {key: html_form[key] for key in html_form.keys()}
            # converting age to categories as may machine learning model also implements this. Please see my data exploration section in jupypter notebook where I import the best model from
            data['age_group'] = pd.cut([age], bins=[0, 30, 60, 100], labels=['young', 'middle_age', 'Seniors'])[0]
            # Feature engineering a new variable just like I did in my notebook
            data['time_spent_hospital_with_med'] = time_in_hospital * num_medications
            #Using the helper function to get binary values
            data['diabetic_specific_diagnosis'] = compute_diabetic_flag([html_form['diag_1'], html_form['diag_2'], html_form['diag_3']])
            # removing age, and all three diag variables because I do not use them in my model built
            del data['age'], data['diag_1'], data['diag_2'], data['diag_3'] 

            form_val_df = pd.DataFrame([data])
            #Here we are using our XBG model to predict the readmittance using the value we grabbed from the form
            #because the value is a numpy class converting into python class int
            prediction = int(best_model.predict(form_val_df)[0])
            # Make prediction string more meanigful for template display
            prediction = "Not likely to be readmitted" if prediction == 0 else "Most likely to be readmitted"
            print(f"class Type of prediction is {type(prediction)}")
            # Getting the preprocessor and classifier from the pipeline
            preprocessor = best_model.named_steps["preprocessor"]
            classifier   = best_model.named_steps["classifier"]
            # The transform method will convert our form values to be used in our model ezample(as we are using one hot encoder,etc)
            x_transformed = preprocessor.transform(form_val_df)
            #This gets our feature names from the pipeline because after the form value are transformed, there are no column names but numbers. We use names later to determine the feature and its effect on our prediction decision
            feature_names = retrieve_features_pipeline(preprocessor)
            # because x_transformed is a numpy array, we need to create a dataframe for SHAP analysis
            x_df = pd.DataFrame(x_transformed, columns=feature_names)

            # this is a good practice as per SHAP documentation
            explainer = shap.TreeExplainer(classifier)
            shap_values = explainer.shap_values(x_df)              
            base_value  = explainer.expected_value                 

            # I constructed the SHAP explanation as reccomended in the SHAP documentation from https://shap.readthedocs.io/en/latest/generated/shap.Explanation.html
            exp = shap.Explanation(
                values      = shap_values[0],
                base_values = base_value,
                data        = x_df.iloc[0],
                feature_names = feature_names
            )
            # Here I am creating an Images folder inside the Static folder. If the folder is not there, 
            # It creates one for us
            plot_dir  = os.path.join(app.root_path, "static", "images")
            os.makedirs(plot_dir, exist_ok=True)

            # Here I am assigning the dimension of the plot
            plt.figure(figsize=(10,6))
            # After frequent retries, the ideal max_display is 20
            shap.plots.waterfall(exp, max_display=20, show=False)

            # Now that I have the plot, I am saving the plot and closing it.
            # If I do not close the plot, sometimes there is an error because the file still remains in
            # next form submission and it errors out. Closing the plot is necassary
            plot_filename = "my_plot.png"
            plot_path = os.path.join(plot_dir, plot_filename)
            plt.savefig(plot_path, bbox_inches="tight")
            plt.close()
            # storing the results and images in session because I am redirecting this page once a user submits the form. This is a common practice.
            session['results'] = f"Prediction: {prediction}"
            session["my_plot"] = "images/my_plot.png"


            return redirect(url_for('predict_readmittance'))

        except Exception as e:
            error_msg = f"Error is {e}"
            session['results'] = f"Error: {e}"
            session["my_plot"] = None
            return redirect(url_for('predict_readmittance'))
            # print(error_msg)
            # return render_template("diabetes_form.html", results=error_msg)

    # If GET request the stored value for results and images will be removed from the session
    results = session.pop('results', None)
    plot = session.pop("my_plot", None)
    return render_template("diabetes_form.html", results=results, my_plot= plot)
    # return render_template("diabetes_form.html")

#need to add a caution (Please be advised that this is not a doctors reccomendation, This is a machine learning algorith (mention about recall and precision, this is just a suggestion and mention about the scores))


def projects():
    return render_template('mle.html')


# this route loads my general projects section
@app.route('/general')
def general_projects():
    return render_template('general_projects.html')

# helper function to convert string to integer
def convert_to_int(value):
    return int(value)

#helper function to convert diabetes specific related codes to 0 or 1 
def compute_diabetic_flag(diags):
    return 1 if any(code in ['249', '250'] for code in diags) else 0



if __name__ == "__main__":
    app.run(debug=True)